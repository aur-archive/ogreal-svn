Index: Makefile.am
===================================================================
--- Makefile.am	(revision 137)
+++ Makefile.am	(working copy)
@@ -1,4 +1,4 @@
-SUBDIRS = include src Demos
+SUBDIRS = include src 
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = OgreAL.pc
 EXTRA_DIST = bootstrap README LICENSE
Index: src/OgreALSoundManager.cpp
===================================================================
--- src/OgreALSoundManager.cpp	(revision 137)
+++ src/OgreALSoundManager.cpp	(working copy)
@@ -36,7 +36,7 @@
 #include "OgreALException.h"
 #include "OgreALSoundManager.h"
 
-template<> OgreAL::SoundManager* Ogre::Singleton<OgreAL::SoundManager>::ms_Singleton = 0;
+template<> OgreAL::SoundManager* Ogre::Singleton<OgreAL::SoundManager>::msSingleton = 0;
 
 #if OGREAL_THREADED
 	boost::thread *OgreAL::SoundManager::mOgreALThread = 0;
@@ -149,12 +149,12 @@
 
 	SoundManager* SoundManager::getSingletonPtr(void)
 	{
-		return ms_Singleton;
+		return msSingleton;
 	}
 
 	SoundManager& SoundManager::getSingleton(void)
 	{  
-		assert( ms_Singleton );  return (*ms_Singleton);  
+		assert( msSingleton );  return (*msSingleton);  
 	}
 
 	Sound* SoundManager::createSound(const Ogre::String& name, 
Index: src/OgreALListener.cpp
===================================================================
--- src/OgreALListener.cpp	(revision 137)
+++ src/OgreALListener.cpp	(working copy)
@@ -36,7 +36,7 @@
 #include "OgreALException.h"
 #include "OgreALListener.h"
 
-template<> OgreAL::Listener* Ogre::Singleton<OgreAL::Listener>::ms_Singleton = 0;
+template<> OgreAL::Listener* Ogre::Singleton<OgreAL::Listener>::msSingleton = 0;
 
 namespace OgreAL {
 	Listener::Listener() :
@@ -72,12 +72,12 @@
 
 	Listener* Listener::getSingletonPtr(void)
 	{
-		return ms_Singleton;
+		return msSingleton;
 	}
 
 	Listener& Listener::getSingleton(void)
 	{  
-		assert(ms_Singleton);  return (*ms_Singleton);  
+		assert(msSingleton);  return (*msSingleton);  
 	}
 
 	void Listener::setGain(Ogre::Real gain)
Index: src/OgreALSound.cpp
===================================================================
--- src/OgreALSound.cpp	(revision 137)
+++ src/OgreALSound.cpp	(working copy)
@@ -1066,7 +1066,10 @@
 
 	void Sound::queueBuffers()
 	{
-		alSourceQueueBuffers(mSource, mNumBuffers, mBuffers);
+                if (mNumBuffers == 1)
+                    alSourcei(mSource, AL_BUFFER, mBuffers[0]);
+                else
+                    alSourceQueueBuffers(mSource, mNumBuffers, mBuffers);
 		CheckError(alGetError(), "Failed to bind Buffer");
 	}
 
@@ -1079,15 +1082,8 @@
 		** it wasn't playing.
 		*/
 		alSourceStop(mSource);
+                alSourcei(mSource, AL_BUFFER, 0);
 		CheckError(alGetError(), "Failed to stop sound");
-
-		int queued;
-		alGetSourcei(mSource, AL_BUFFERS_QUEUED, &queued);
-		CheckError(alGetError(), "Failed to get Source");
-
-		alSourceUnqueueBuffers(mSource, queued, mBuffers);
-		CheckError(alGetError(), "Failed to unqueue Buffers");
-
 		
 		mBuffersQueued = false;
 	}
Index: configure.ac
===================================================================
--- configure.ac	(revision 137)
+++ configure.ac	(working copy)
@@ -24,8 +24,6 @@
 dnl Chekcing for OpenAL
 PKG_CHECK_MODULES(OPENAL, openal)
 
-dnl The Demos require OIS
-PKG_CHECK_MODULES(OIS, OIS)
 
 dnl You may want to export each var individually
 AC_SUBST(OGREAL_CFLAGS,"$OGRE_CFLAGS $VORBIS_FLAGS $OPENAL_FLAGS")
